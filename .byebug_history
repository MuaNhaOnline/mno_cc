q
params.permit [locations: [:object_type, :object_id ]]
params.permit [locations: [ [:object_type, :object_id] ]]
params.permit [locations: [ { [:object_type, :object_id] } ]]
params.permit [locations: [ { :object_type, :object_id } ]]
params.permit [locations: [{}]]
params.permit [locations: []]
params.permit
params
params.permit [locations: []]
locations: [], real_estate_type_ids: []
:purpose_id, :min_price, :max_price, :min_area, :max_area,
self.assign_attributes params.permit [
params[:locations]
exit
reload!
a.locations
a.real_estate_types
a = ReRegistration
ReRegistration
params[:real_estate_types]
params
q
params
q
RealEstateType.search keyword
keyword
q
params[:re_registration][:locations]
params[:re_registration][:real_estate_types]
params[:re_registration][real_estate_types]
params[:re_registration]
parmas[:re_registration]
q
params[:re_registration][:locations][3]
params[:re_registration][:locations][2]
params[:re_registration][:locations][1]
params[:re_registration][:locations][0][1]
params[:re_registration][:locations][0]
params[:re_registration][:locations]
params[:locations]
params
q
noti.save
noti.receiver = user_ids.map{ |user_id| NotificationReceiver.new user_id: user_id }
user_ids.blank?
user_ids = relative_users.map{ |value| value[1] == 'user' ? value[0] : nil }.select{ |value| !value.nil? }
relative_users
q
relative_users.map{ |value| value[1] == 'user' ? value[0] : nil }
relative_users
user_ids
user_ids = relative_users.map{ |value| value[1] == 'user' ? value[0] : nil }.select{ |value| !value.nil? }
relative_users
q
user_ids
user_ids = relative_users.map{ |value| value[1] == 'user' ? value[0] : nil }.select{ |value| !value.nil? }
relative_users.select{ |v| v[0] }
v
relative_users.select{ |v| v[0] }
relative_users.select{ |v| v.id }
relative_users
[35,36,37].delete(35)
[35,36,37].delete(nil)
[35,36,37].delete nil
relative_users[0][1] == 'user' ? relative_users[0][0] : nil
relative_users[0][1] == 'user' ? relative_users[0][1] : nil
relative_users[0][1] == 'user'
relative_users[0]
relative_user[0]
user_ids = relative_users.map{ |value| value[1] == 'user' ? value[0] : nil }.delete nil
relative_users
q
where += ''
q
params[:bounds]
where += ''
where
params
ls
where
joins
where
q
params
q
params[:search][:purpose].blanks?
params[:search][:purpose]
params[:search][purpose].blank?
params[:search][purpose]
params[:search]
q
params[:slug]
q
params
params.require(:request).permit(:id)
params
params.require(:request)
params
request.save_with_params params[:request]
request.save_with_params[:request]
request
params[:request]
params
q
self
id
q
project.investor_id
project.investor
project
q
Project.joins(blocks: { real_estates: :in_floors }).where("floor_real_estates.id = #{params[:product_id]}")
floor_real_estate
params
authorize! :edit, project
q
products[:real_estates]
products.count
products
q
RealEstate.joins(res_joins).where("projects.id = 48")
res_joins
RealEstate.joins(block: :project).where("projects.id = 48")
RealEstate.joins(block: :project).where("projects_id = 48")
RealEstate.joins(block: :project)
where += '1'
where
q
where
q
products
q
group.users.where id: 0
group.users.exists(id: user.id)
group.users.exists
group.users.exists(id: user.id)
group.users
group
q
params[:contact]
